#!/usr/bin/env python3
"""
  Copyright (c) 2013, William Ting

  *  This program is free software; you can redistribute it and/or modify
  it under the terms of the GNU General Public License as published by
  the Free Software Foundation; either version 3, or (at your option)
  any later version.

  *  This program is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU General Public License for more details.

  *  You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software
  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.
"""

import argparse
import os
import re
import shutil
import sys

from io import FileIO as file

VERSION = "0.2"

def parse_options():
    global VERSION

    parser = argparse.ArgumentParser(
            description = 'Adjust srt subtitle times',
            formatter_class=argparse.RawDescriptionHelpFormatter,
            epilog =
'''
Timestamps may be given as standalone seconds (optionally with decimals) and
may include hours and minutes provided that colon (:) separators are used.

If a single timestamp is given, it is treated as an offset that will be
applied (added) to all timestamps in the file.

If multiple time offsets are given, they must be in pairs and the first value
of each pair will be used as an original time and the second will be the new
time.  All timestamps will be adjusted according to a linear interpolation of
the closest provided adjustment values.

Examples:
    srt-scale 2.3 input.srt
        Will adjust all the subtitles to be 2.3 seconds later
    srt-scale 21 32.6 1:04:35.545 1:06:21.8 input.srt
        Will use the points (21.0, 32.6) and (1:04:35.545, 1:06:21.8) to
        shift and scale all timestamps based on the defined line.
        Subtitles near the beginning will start off approximately 11.6
        seconds later, and timestamps near the end will be approximately
        1 minute and 46.255 seconds later.
''')

    parser.add_argument('ts', nargs = '+', help = 'Single offset or pairs of offset timestamps')
    parser.add_argument('srt_file', type = file)
    parser.add_argument('-o', '--overwrite', action = "store_true", default = False,
            help = "overwite original file")
    parser.add_argument('--version', action = "version", version = "%(prog)s " + VERSION,
            help = "show version information and quit")

    return parser.parse_args()

def ts_to_secs(ts):
    "Takes timestamp in 'HH:MM:SS,mmm' form, returns seconds"
    hours, mins, secs, ms = [int(x) for x in ts.replace(',', ':').split(':')]
    return (hours * 3600) + (mins * 60) + secs + (ms / 1000)

def adjust_time(time_string, adjs):
    # Find and apply the adjustment values of the proper timerange
    ts = ts_to_secs(time_string)
    try:
        for idx in range(len(adjs)):
            _, slope, offset = adjs[idx]
            if adjs[idx + 1][0] > ts:
                break
    except IndexError:
        pass

    ts = ts * slope + offset
    return '%02d:%02d:%02d,%03d' % (ts // 3600, ts % 3600 // 60, ts % 60, round((ts - int(ts)) * 1000))

def parse_time(ts):
    "Takes a time string and calculates the time in seconds (fractional)"
    items = ts.replace(',', '.').split(':')
    while len(items) < 3:
        items.insert(0, 0)
    if len(items) > 3:
        raise ValueError('Time string is not valid, too many number elements: %s', ts)
    return int(items[0]) * 3600 + int(items[1]) * 60 + float(items[2])

def calc_adjust(options):
    "Calculate and return the correction factors for the provided timeframes"
    vals = [parse_time(x) for x in options.ts]
    adjs = []  # This will contain list of (time, slope, offset) tuples
    if len(vals) == 1:
        adjs.append((0, 1, vals[0]))
        return adjs
    if len(vals) % 2 != 0:
        raise ValueError('Timestamp values must be in pairs')
    # Handle single point (fixed offset)
    if len(vals) == 2:
        adjs.append((0, 1, vals[1] - vals[0]))

    # Handle if have multiple pairs of points that define a set of joined line segments
    for idx in range(0, len(vals) - 2, 2):
        x1, y1, x2, y2 = vals[idx:idx + 4]
        if x1 >= x2 or y1 >= y2:
            raise ValueError('Timestamp pairs must be in increasing order')
        slope = (y2 - y1) / (x2 - x1)
        # Find the y-intercept
        shift = y1 - (slope * x1)
        adjs.append((x1, slope, shift))

    return adjs

def modify_file(options):
    if '.srt' not in options.srt_file.name:
        sys.exit("ERROR: invalid srt file")

    adjs = calc_adjust(options)

    out_filename = os.path.splitext(options.srt_file.name)[0] + '-resync.srt'
    with open(options.srt_file.name, 'r', encoding = 'utf-8') as srt:
        line = srt.readline()  # read first line to determine line endings
        with open(out_filename, 'w', encoding = 'utf-8', newline = srt.newlines) as out:
            while line:
                match = re.search(r'^(\d+:\d+:\d+,\d+)\s+--\>\s+(\d+:\d+:\d+,\d+)', line)
                if match:
                    out.write("%s --> %s\n" % (
                        adjust_time(match.group(1), adjs),
                        adjust_time(match.group(2), adjs)
                        ))
                else:
                    out.write(line)
                line = srt.readline()

    if options.overwrite:
        shutil.move(out_filename, options.srt_file.name)

if __name__ == "__main__":
    modify_file(parse_options())
